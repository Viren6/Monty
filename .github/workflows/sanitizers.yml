name: Sanitizers
on:
  workflow_call:
jobs:
  Test-under-sanitizers:
    name: ${{ matrix.sanitizers.name }}
    runs-on: ${{ matrix.config.os }}
    env:
      RUSTFLAGS: "-D warnings"
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: Ubuntu 22.04
            os: ubuntu-22.04
            shell: bash
        sanitizers:
          - name: Run with thread sanitizer
            rustflags: "-Z sanitizer=thread"
            instrumented_option: thread-sanitizer
          - name: Run with UB sanitizer
            rustflags: "-Z sanitizer=undefined"
            instrumented_option: undefined-sanitizer
          - name: Run under valgrind
            rustflags: ""
            instrumented_option: valgrind
          - name: Run non-instrumented
            rustflags: ""
            instrumented_option: none
    defaults:
      run:
        shell: ${{ matrix.config.shell }}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install required Linux packages
        run: |
          sudo apt update
          sudo apt install valgrind

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          components: rust-src

      - name: Configure Rust for sanitizers
        run: rustup component add llvm-tools-preview

      - name: Build Monty with make embed
        run: |
          export RUSTFLAGS="${{ matrix.sanitizers.rustflags }} -C opt-level=1 -C debuginfo=2"
          make embed

      - name: ${{ matrix.sanitizers.name }}
        run: |
          if [ "${{ matrix.sanitizers.instrumented_option }}" = "valgrind" ]; then
            valgrind --leak-check=full --error-exitcode=1 target/x86_64-unknown-linux-gnu/debug/<your-binary-name>
          else
            export TSAN_OPTIONS="suppressions=${{ github.workspace }}/tsan_suppressions.txt"
            export UBSAN_OPTIONS="suppressions=${{ github.workspace }}/ubsan_suppressions.txt"
            cargo test --target x86_64-unknown-linux-gnu -- --test-threads=1
          fi
